
[SBV] tests/T21.hs:9:1 Proving "f", using Z3.
** Starting symbolic simulation..
** Generated symbolic trace:
SORTS
  sbvChar
  sbvString
INPUTS
  s0 :: sbvChar, aliasing "c"
  s1 :: sbvString, aliasing "s"
CONSTANTS
  s_2 = False :: Bool
  s_1 = True :: Bool
TABLES
ARRAYS
UNINTERPRETED CONSTANTS
  [uninterpreted] |==_0| :: sbvString -> sbvString -> SBool
  [uninterpreted] |==| :: sbvChar -> sbvChar -> SBool
USER GIVEN CODE SEGMENTS
AXIOMS
DEFINE
  s2 :: SBool = s0 [uninterpreted] |==| s0
  s3 :: SBool = s1 [uninterpreted] |==_0| s1
  s4 :: SBool = s2 & s3
CONSTRAINTS
ASSERTIONS
OUTPUTS
  s4
** Translating to SMT-Lib..
** Checking Theoremhood..
** Generated SMTLib program:
; Automatically generated by SBV. Do not edit.
(set-option :produce-models true)
; has user-defined sorts, no logic specified.
; --- uninterpreted sorts ---
(declare-sort sbvChar 0)  ; N.B. Uninterpreted: originating from sbvPlugin: tests/T21.hs:9:3
(declare-sort sbvString 0)  ; N.B. Uninterpreted: originating from sbvPlugin: tests/T21.hs:9:5
; --- literal constants ---
(define-fun s_2 () Bool false)
(define-fun s_1 () Bool true)
; --- skolem constants ---
(declare-fun s0 () sbvChar) ; tracks user variable "c"
(declare-fun s1 () sbvString) ; tracks user variable "s"
; --- constant tables ---
; --- skolemized tables ---
; --- arrays ---
; --- uninterpreted constants ---
(declare-fun |==_0| (sbvString sbvString) Bool)
(declare-fun |==| (sbvChar sbvChar) Bool)
; --- user given axioms ---
; --- formula ---
(assert ; no quantifiers
   (let ((s2 (|==| s0 s0)))
   (let ((s3 (|==_0| s1 s1)))
   (let ((s4 (and s2 s3)))
   (not s4)))))
** Calling: "z3 -nw -in -smt2"
** Sending the following model extraction commands:
(get-value (s0))
(get-value (s1))
** Z3 output:
sat
((s0 sbvChar!val!0))
((s1 sbvString!val!0))
** Done..
[Z3] Falsifiable. Counter-example:
  c =   sbvChar!val!0 :: sbvChar
  s = sbvString!val!0 :: sbvString
[SBV] Counter-example might be bogus due to uninterpreted constants:
  [<no location info>] == :: String -> String -> Bool
  [<no location info>] == :: Char -> Char -> Bool
[SBV] Failed. (Use option 'IgnoreFailure' to continue.)
