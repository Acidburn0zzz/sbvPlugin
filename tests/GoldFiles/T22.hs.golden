
[SBV] tests/T22.hs:9:1 Proving "f", using Z3.
** Starting symbolic simulation..
** Generated symbolic trace:
SORTS
  String_0
INPUTS
  s0 :: String_0, aliasing "s"
CONSTANTS
  s_2 = False :: Bool
  s_1 = True :: Bool
TABLES
ARRAYS
UNINTERPRETED CONSTANTS
  [uninterpreted] reverse :: String_0 -> String_0
  [uninterpreted] |==| :: String_0 -> String_0 -> SBool
USER GIVEN CODE SEGMENTS
AXIOMS
DEFINE
  s1 :: String_0 = [uninterpreted] reverse s0
  s2 :: String_0 = [uninterpreted] reverse s1
  s3 :: SBool = s2 [uninterpreted] |==| s0
CONSTRAINTS
ASSERTIONS
OUTPUTS
  s3
** Translating to SMT-Lib..
** Checking Theoremhood..
** Generated SMTLib program:
; Automatically generated by SBV. Do not edit.
(set-option :produce-models true)
; has user-defined sorts, no logic specified.
; --- uninterpreted sorts ---
(declare-sort String_0 0)  ; N.B. Uninterpreted: originating from sbvPlugin: tests/T22.hs:9:3
; --- literal constants ---
(define-fun s_2 () Bool false)
(define-fun s_1 () Bool true)
; --- skolem constants ---
(declare-fun s0 () String_0) ; tracks user variable "s"
; --- constant tables ---
; --- skolemized tables ---
; --- arrays ---
; --- uninterpreted constants ---
(declare-fun reverse (String_0) String_0)
(declare-fun |==| (String_0 String_0) Bool)
; --- user given axioms ---
; --- formula ---
(assert ; no quantifiers
   (let ((s1 (reverse s0)))
   (let ((s2 (reverse s1)))
   (let ((s3 (|==| s2 s0)))
   (not s3)))))
** Calling: "z3 -nw -in -smt2"
** Sending the following model extraction commands:
(get-value (s0))
** Z3 output:
sat
((s0 String_0!val!0))
** Done..
[Z3] Falsifiable. Counter-example:
  s = String_0!val!0 :: String_0
[SBV] Counter-example might be bogus due to uninterpreted constants:
  [<no location info>] ==      :: [Char] -> [Char] -> Bool
  [<no location info>] reverse :: [Char] -> [Char]
[SBV] Failed. (Use option 'IgnoreFailure' to continue.)
